(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{522:function(s,e,a){"use strict";a.r(e);var t=a(4),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("数据的存储")]),s._v(" "),a("div",{staticClass:"language-mssql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("create table t1(\na int,\nb int,\nc int,\nd int,\ne varchar(20),\nprimary key (a)\n);\n\ninsert into t1 values(4,3,1,1,'d');\ninsert into t1 values(1,1,1,1,'1');\ninsert into t1 values(8,8,8,8,'h');\ninsert into t1 values(2,2,2,2,'b');\ninsert into t1 values(5,2,3,5,'e');\ninsert into t1 values(3,3,2,2,'c');\ninsert into t1 values(7,4,5,5,'g');\ninsert into t1 values(6,6,4,4,'f');\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/Krains/FigureBed/raw/master/img/mysql%E6%95%B0%E6%8D%AE%E8%A1%8C%E5%AD%98%E5%82%A8.png",alt:"mysql数据行存储"}})]),s._v(" "),a("p",[s._v("数据库中每一行数据存储在一个行格式中的列数据中，多个行放置在一个页中，取磁盘的数据时，会以页为单位将整个页放到内存中。")]),s._v(" "),a("p",[s._v("图中默认一个页最多能放4行数据，插入数据的时候会按照主键大小进行排序，比如插入a为4,1,8,2时，最终这四行数据会以"),a("strong",[s._v("链表")]),s._v("的形式按照1,2,4,8的顺序存放，页结构中有一个目录项，我们对行数据进行分组，图中以两个行数据为一组，将组头的主键放到目录项中，"),a("strong",[s._v("目录项是一个数组")]),s._v("，查询主键的时候可以使用二分法进行查询到对应组，再在组中遍历链表。")]),s._v(" "),a("p",[s._v("当一个页的数据满了的时候，会开辟另一个页，用来存放接下来的行数据，比如再次插入a为5这行数据时，会将8移动到新开辟的页中，5这行数据就放置在原来8的这个位置，当然插入数据的时候主键的顺序是乱序的话，需要进行频繁的移动和排序，这样效率比较低，因此建议设置主键自增长，这样插入数据的效率较高，同时也建议主键设置得比较小，因为主键会冗余的在目录页中存一份，并且如果主键设置得较大的话行数据就大了，页中放的行就少了，如果分多几个页的话会加深树的深度，查找的效率变低。")]),s._v(" "),a("p",[a("strong",[s._v("页与页之间也以指针连接，构成了一个双向链表。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/Krains/FigureBed/raw/master/img/mysql%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A82.png",alt:"mysql数据存储2"}})]),s._v(" "),a("p",[s._v("最上面的是目录页，用来存储两个页的目录，它也拥有与下面两个页一样的结构，也会有目录项，行与行之间也会构成链表，只不过下面存的是真实的数据，上面存的是数据所在的位置。这就是简单的BTree+结构。")]),s._v(" "),a("p",[s._v("BTree+树对比AVL树的优势")]),s._v(" "),a("p",[s._v("BTree+树一个结点就是一页，一可以存储多行数据，相比用AVL数一个结点只能存一行数据，如果存储相同数量的行的话BTree+树的高度就会比较低，查询的效率较高。")]),s._v(" "),a("p",[s._v("对比Hash索引的优势")]),s._v(" "),a("ul",[a("li",[s._v("hash索引不能够进行排序")]),s._v(" "),a("li",[s._v("只支持精确查找，无法用于范围查找")])]),s._v(" "),a("p",[s._v("BTree+树高度计算")]),s._v(" "),a("p",[s._v("假设主键数据类型是INT，占用4bytes，一行数据总共占用是1KB，指针6bytes，一个页大小是16kb")]),s._v(" "),a("p",[s._v("高度为2时：对于非叶子结点来说，没有存数据，只存了主键，一个页能存16384/（4+6）个行数据，也就是能指向1638个页，对于叶子结点来说，每个页能够存储16/1=16行数据，那么16*1638=26208行数据。")]),s._v(" "),a("p",[s._v("高度为3时：多了一个目录的目录，所以1638 *1638 * 16= 42928704 行数据")]),s._v(" "),a("h3",{attrs:{id:"索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[s._v("#")]),s._v(" 索引")]),s._v(" "),a("p",[s._v("聚簇索引")]),s._v(" "),a("p",[s._v("以主键构建的索引，其叶子结点存储了真实的记录。")]),s._v(" "),a("p",[s._v("普通索引：")]),s._v(" "),a("div",{staticClass:"language-mssql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("create index idx_t1_bcd on t1(b, c, d)  --使用t1表中的b，c，d列创建名为idx_t1_bcd的索引\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/Krains/FigureBed/raw/master/img/%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95.png",alt:"联合索引"}})]),s._v(" "),a("p",[s._v("bcd如何排序？")]),s._v(" "),a("p",[s._v("跟字符串排序一样，先比较a，不同则可以区分大小，相同在比较b，然后c。当然对于不同的字符集有不同的比较规则，MySql中collation就定义了每个字符集的比较规则。")]),s._v(" "),a("p",[s._v("普通索引叶子结点不存完整的数据，只存索引项和主键，查找数据的时候先通过普通索引找到对应的主键，在用这个主键去主键索引去找，这个操作叫回表。")]),s._v(" "),a("p",[s._v("如果bcd有重复如何？")]),s._v(" "),a("p",[s._v("会将主键额外的存储，以区分不同的bcd。")]),s._v(" "),a("p",[s._v("如何查看sql语句是否使用了索引？")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("explain select * from t1 where b = 1 and c = 1 and d = 1;  -- 查看索引的使用情况\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://gitee.com/Krains/FigureBed/raw/master/img/%E7%B4%A2%E5%BC%95%E5%AD%97%E6%AE%B5.png",alt:"索引字段"}})]),s._v(" "),a("p",[s._v("type：如果为'all'时查询数据时用的是全盘扫描的方法")]),s._v(" "),a("p",[s._v("possible_keys: 可能使用的索引，对于要查询的数据来说，使用的查询条件可能可以使用多个索引，这里列出了所有可能可以使用的索引。")]),s._v(" "),a("p",[s._v("key：最终选择的索引，查询优化器选择它认为最优的索引，用它选择的索引做查询。")]),s._v(" "),a("p",[s._v("用辅助索引的情况下什么时候可能查询优化器会选择全盘扫描？")]),s._v(" "),a("p",[s._v("如果使用辅助索引找到的主键是很多时（全表主键的80%-90%？），这个时候如果使用辅助索引效率会比较低，这个时候查询优化器会选择用全表扫描的方法查询。")]),s._v(" "),a("p",[s._v("辅助索引的最左匹配")]),s._v(" "),a("p",[s._v("全值匹配")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from t1 where b = 1 and c = 1 and d = 1;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("最左匹配")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from t1 where b = 1;\nselect * from t1 where b = 1 and c = 1;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("能够使用索引，因为对于给出b=1，可以使用它'1**'去比较'235', '322'的大小。")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from t1 where c = 1;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v('不能够使用索引，对于c=1, "*1*"无法与"235"，"322"比较大小，从而使用索引的时候无法排除掉一些不在其范围的值。B+树先是按照b列的值排序的,在b列的值相同的情况下才使用c列进行排序,也就是说b列的值不同的记录中c的值可能是无序的。而现在你跳过b列直接根据c的值去查找,这是做不到的。')]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from t1 where b like '%101%';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这样也是用不到索引的，前缀没有确定，无法比较索引项与条件的大小关系。")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from t1 where b > 1 and b < 8;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("能够使用到索引，对于这种范围查询来说，上边的查询过程其实是这样的：")]),s._v(" "),a("ul",[a("li",[s._v("先找到b值为1的记录")]),s._v(" "),a("li",[s._v("找到b值为8的记录")]),s._v(" "),a("li",[s._v("由于所有的记录都是由链表连起来的（记录之间用单链表，数据页之间用双链表），只需要遍历链表就能够取出记录")]),s._v(" "),a("li",[s._v("找到这些记录的主键值，再到聚簇索引中回表查找完整的记录")])]),s._v(" "),a("p",[s._v("在联合索引中使用范围查询的时候时，如果对对个列同时进行范围查找的话，只有对索引最左边的那个列进行范围查询的时候才能用到B+树索引，比如；")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from t1 where b > 3 and c > 1;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这个查询分为两个部分")]),s._v(" "),a("ul",[a("li",[s._v("通过条件b > 3 使用联合索引查找多条记录，该条件使用了索引（不一定，当查询记录过多时，查询优化器会使用全盘扫描的方式）")]),s._v(" "),a("li",[s._v("对这些记录使用c > 1进行过滤，该条件没有使用索引")]),s._v(" "),a("li",[s._v("最后将记录的主键取出去聚簇索引查找数据")])]),s._v(" "),a("p",[s._v("但是这里还有前面说到的查询优化器的一个优化，比如")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from t1 where b > 1 and c > 1;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果通过条件 b > 1 找出的记录过多的话，查询优化器会选择全盘扫描而不是使用索引。")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from t1 where b > 1 and c > 1;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from t1 where b = 1 and c > 1;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("不考虑优化器的话，自然是能用到索引的。")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from t1 order by b, c, d;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("不考虑查询优化器的话，因为索引本身就是对bcd进行排序的，所以能够使用索引提取主键，然后回表取数据。")]),s._v(" "),a("p",[s._v("考虑查询优化器的时，由于通过索引取出了过多的记录，不如全盘扫描然后再进行排序操作的效率高。")]),s._v(" "),a("p",[s._v("根据最左匹配原则，建立索引的时候尽量将使用查询次数最多的项放到最前面。")])])}),[],!1,null,null,null);e.default=n.exports}}]);