(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{608:function(v,_,e){"use strict";e.r(_);var a=e(4),t=Object(a.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("p",[v._v("定义：")]),v._v(" "),e("p",[v._v("分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。")]),v._v(" "),e("p",[v._v("特点")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("分布性")])]),v._v(" "),e("li",[e("p",[v._v("对等性")])]),v._v(" "),e("li",[e("p",[v._v("并发性")])]),v._v(" "),e("li",[e("p",[v._v("缺乏全局时钟")])]),v._v(" "),e("li",[e("p",[v._v("故障总会发生")])])]),v._v(" "),e("p",[v._v("挑战")]),v._v(" "),e("ul",[e("li",[v._v("通信异常")]),v._v(" "),e("li",[v._v("网络分区")]),v._v(" "),e("li",[v._v("三态")]),v._v(" "),e("li",[v._v("节点故障")])]),v._v(" "),e("p",[v._v("从acid到cap/base")]),v._v(" "),e("p",[v._v("cap定理")]),v._v(" "),e("p",[v._v("一个分布式不可能同时满足一致性（C：Consistency）、可用性（A：Availability）和分区容错性（P：Partition tolerance）这三个基本需求，最多只能满足其中两项。")]),v._v(" "),e("p",[v._v("一致性")]),v._v(" "),e("p",[v._v("一致性是指数据在多个副本之间是否能够保持一致的特性。在一致性的需求下，一个系统在数据一致的状态下执行更新操作后，应该保证系统的数据仍然处于一致的状态。")]),v._v(" "),e("p",[v._v("强一致性：分布式系统中，如果能够做到针对一个数据项的更新操作执行成功后，所有用户都可以读取到其最新的值。")]),v._v(" "),e("p",[v._v("弱一致性：最终一致性")]),v._v(" "),e("p",[v._v("可用性")]),v._v(" "),e("p",[v._v("指系统提供的服务必须一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间（因各个场景而异）内返回结果。")]),v._v(" "),e("p",[v._v("分区容错性")]),v._v(" "),e("p",[v._v("指的是分布式系统在遇到任何网络分区故障的时候，仍然需要能够保证对外提供满足一致性和可用性的服务，除非是整个网络环境都发生了故障。")]),v._v(" "),e("p",[v._v("BASE理论")]),v._v(" "),e("p",[v._v("BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写，BASE是对CAP中一致性和可用性权衡的结果，其核心思想是即使无法做到强一致性，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。")]),v._v(" "),e("ul",[e("li",[v._v("基本可用")]),v._v(" "),e("li",[v._v("弱状态")]),v._v(" "),e("li",[v._v("最终一致性")])]),v._v(" "),e("h1",{attrs:{id:"一致性协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一致性协议"}},[v._v("#")]),v._v(" 一致性协议")]),v._v(" "),e("h2",{attrs:{id:"_2pc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2pc"}},[v._v("#")]),v._v(" 2PC")]),v._v(" "),e("p",[v._v("Two-Phase Commit，")]),v._v(" "),e("p",[v._v("阶段一：提交事务请求")]),v._v(" "),e("ul",[e("li",[v._v("事务询问：协调者向所有的参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者的响应")]),v._v(" "),e("li",[v._v("执行事务：各参与者节点执行事务操作，并将Undo和Redo信息记入事务日志中")]),v._v(" "),e("li",[v._v("各参与者向协调者反馈事务询问的响应：如果参与者成功执行了事务操作，那么就反馈给协调者Yes响应，否者就返回No")])]),v._v(" "),e("p",[v._v("阶段二：执行事务提交")]),v._v(" "),e("p",[v._v("协调者根据各参与者的反馈情况决定最终是否可以进行事务提交操作，有两种可能")]),v._v(" "),e("p",[v._v("执行事务提交")]),v._v(" "),e("p",[v._v("加入协调者从所有的参与者获得的反馈都是Yes响应，那么就会执行事务提交，步骤如下")]),v._v(" "),e("ul",[e("li",[v._v("发送提交请求：协调者向所有参与者节点发出Commit请求")]),v._v(" "),e("li",[v._v("事务提交：参与者接收到Commit请求后，会正式执行事务提交操作，并释放事务执行期间占用的资源。")]),v._v(" "),e("li",[v._v("反馈事务提交结果：参与者完成事务提交之后，向协调者发送Ack消息。")]),v._v(" "),e("li",[v._v("完成事务")])]),v._v(" "),e("p",[v._v("中断事务")]),v._v(" "),e("p",[v._v("加入任何一个参与者向协调者反馈了No响应，或者在等待超时之后，协调者尚接收到所有参与者的反馈响应，那么会中断事务")]),v._v(" "),e("ul",[e("li",[v._v("发送回滚请求：协调者向所有参与者节点发出Rollback请求")]),v._v(" "),e("li",[v._v("事务回滚：参与者会利用阶段一记录的Undo信息来执行事务的回滚操作，并释放事务执行期间占用的资源。")]),v._v(" "),e("li",[v._v("反馈事务回滚结果：参与者在完成事务回滚之后，向协调者发送Ack消息。")]),v._v(" "),e("li",[v._v("中断事务")])]),v._v(" "),e("p",[v._v("优点：原理简单、实现方便")]),v._v(" "),e("p",[v._v("缺点：同步阻塞、单点问题、脑裂、数据不一致、太过保守")]),v._v(" "),e("p",[v._v("同步阻塞：在事务提交的过程中，所有参与该事务操作的逻辑都处于阻塞状态，限制了分布式系统的性能")]),v._v(" "),e("p",[v._v("单点问题：如果协调者出现问题，那么整个二阶段提交流程将无法运转")]),v._v(" "),e("p",[v._v("数据不一致：在执行事务提交的时候，当协调者向所有的参与者发出Commit请求之后，发生了局部网络异常或者是协调者在尚未发送完Commit请求之前自身发生了崩溃，导致最终只有部分参与者收到Commit请求，这些参与者将会提交事务，于是整个分布式系统就会出现数据不一致现象。")]),v._v(" "),e("h2",{attrs:{id:"_3pc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3pc"}},[v._v("#")]),v._v(" 3PC")]),v._v(" "),e("p",[v._v("是二阶段提交协议的改进，将提交事务请求一分为二")]),v._v(" "),e("p",[v._v("阶段一：CanCommit")]),v._v(" "),e("p",[v._v("阶段二：PreCommit")]),v._v(" "),e("p",[v._v("阶段三：doCommit")]),v._v(" "),e("p",[e("img",{attrs:{src:"http://www.hollischuang.com/wp-content/uploads/2015/12/3.png",alt:"3"}})]),v._v(" "),e("p",[v._v("阶段三，可能会出现两种故障")]),v._v(" "),e("ul",[e("li",[v._v("协调者出现问题")]),v._v(" "),e("li",[v._v("协调者和参与者之间的网络出现故障")])]),v._v(" "),e("p",[v._v("这样的情况参与者都会在等待超时之后，继续进行事务提交")]),v._v(" "),e("p",[v._v("在doCommit阶段，如果参与者无法及时接收到来自协调者的doCommit或者rebort请求时，会在等待超时之后，会继续进行事务的提交。（其实这个应该是基于概率来决定的，当进入第三阶段时，说明参与者在第二阶段已经收到了PreCommit请求，那么协调者产生PreCommit请求的前提条件是他在第二阶段开始之前，收到所有参与者的CanCommit响应都是Yes。（一旦参与者收到了PreCommit，意味他知道大家其实都同意修改了）所以，一句话概括就是，当进入第三阶段时，由于网络超时等原因，虽然参与者没有收到commit或者abort响应，但是他有理由相信：成功提交的几率很大。 ）")]),v._v(" "),e("p",[v._v("优点：降低参与者的阻塞范围，并且能够在出现单点故障之后继续达成一致")]),v._v(" "),e("p",[v._v("缺点：在二阶段，参与者接受到preCommit消息后，如果网络出现分区，此时协调者所在的节点和参与者无法进行正常的网络通信，在这种情况下，一旦超时时间到了，参与者依然会进行事务提交，这必然会导致数据不一致性。")]),v._v(" "),e("h2",{attrs:{id:"paxos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#paxos"}},[v._v("#")]),v._v(" Paxos")]),v._v(" "),e("p",[v._v("二阶段和三阶段提交协议不能完全解决数据一致性问题，Paxos是一种基于消息传递且具有高度容错特性的一致性算法，是目前公认的解决分布式一致性问题最有效的算法之一。")]),v._v(" "),e("h2",{attrs:{id:"raft"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#raft"}},[v._v("#")]),v._v(" Raft")]),v._v(" "),e("p",[e("a",{attrs:{href:"http://thesecretlivesofdata.com/raft/",target:"_blank",rel:"noopener noreferrer"}},[v._v("gif图片演示"),e("OutboundLink")],1)]),v._v(" "),e("p",[v._v("每个节点可以有三个状态")]),v._v(" "),e("ul",[e("li",[v._v("Follower")]),v._v(" "),e("li",[v._v("Candidate")]),v._v(" "),e("li",[v._v("Leader")])]),v._v(" "),e("p",[v._v("有个timeout属性，如果follower没有在timeout时间内从leader处得到消息，那么它将会成为candidate。timeout被随机为150-300ms。")]),v._v(" "),e("p",[v._v("Term，当前是第几任leader，如果集群内出现了多个leader，那么Term最大的leader是真正的leader")]),v._v(" "),e("p",[v._v("leader 选举")]),v._v(" "),e("p",[v._v("一开始所有节点都处于follower状态，如果follower没有在timeout时间内从leader处得到消息，那么它将会成为candidate，candidate给其他节点发出投票请求，节点会选择最先到达的投票请求，把它的票投给该请求的发起者，一个节点只能投一次票，如果")]),v._v(" "),e("ul",[e("li",[v._v("其中一个candidate得到了超过半数的投票，那么该candidate将会成为leader，并持续向follower发送心跳")]),v._v(" "),e("li",[v._v("其中两个candidate得到了相同的票数，那么两个candidate将重新计一个timeout")])]),v._v(" "),e("p",[v._v("如果leader挂了，那么节点在timeout时间之后，会成为candidate，竞选leader，收到半数的投票的节点将会成为下一任leader")]),v._v(" "),e("p",[v._v("日志复制")]),v._v(" "),e("p",[v._v("当leader产生，所有的对系统改变的请求将会通过leader处理。")]),v._v(" "),e("ul",[e("li",[v._v("客户端的请求到达leader，leader将会记录日志，但是未提交，因此没有更新节点的值")]),v._v(" "),e("li",[v._v("leader将信息发给follower，follower收到请求之后返回确认信息给leader")]),v._v(" "),e("li",[v._v("leader接收到半数以上的请求之后提交更新，同时给客户端做出响应，然后发送请求给follower让它们也提交更新")])]),v._v(" "),e("p",[v._v("网络分区故障")]),v._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:"C:\\Users\\zsh\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210325191614711.png",alt:"image-20210325191614711"}}),v._v(" "),e("p",[v._v("如果集群遭遇网络分区故障，划分为两个分区，节点B是原来的leader，节点C会成为新的leader，如果此时客户端的请求")]),v._v(" "),e("ul",[e("li",[v._v("打在了B上，那么B记录日志之后将消息发送给follower，但是发现没有收到半数的响应，所以这两个节点将不会提交更新")]),v._v(" "),e("li",[v._v("打在了C上，上半分区还是能够正常进行日志复制操作")])]),v._v(" "),e("p",[v._v("当网络分区故障解除，leader B发现Term更高的leader，于是自己变成follower，回滚之前未提交的操作，并同步日志，保持与leader的数据一致性。")])])}),[],!1,null,null,null);_.default=t.exports}}]);