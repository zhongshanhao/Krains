(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{593:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"redis-的数据结构及其实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-的数据结构及其实现"}},[s._v("#")]),s._v(" Redis 的数据结构及其实现")]),s._v(" "),a("p",[s._v("String，SDS")]),s._v(" "),a("p",[s._v("List，链表")]),s._v(" "),a("p",[s._v("Hash，字典")]),s._v(" "),a("p",[s._v("Set，跳跃表")]),s._v(" "),a("p",[s._v("Sorted set")]),s._v(" "),a("h3",{attrs:{id:"过期键删除策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过期键删除策略"}},[s._v("#")]),s._v(" 过期键删除策略")]),s._v(" "),a("h4",{attrs:{id:"定时删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时删除"}},[s._v("#")]),s._v(" 定时删除")]),s._v(" "),a("p",[s._v("在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作。")]),s._v(" "),a("p",[s._v("优点：对内存友好，通过使用定时器，定时删除策略可以保证过期键会尽可能地被删除，并释放过期键所占用的内存。")]),s._v(" "),a("p",[s._v("缺点：对CPU不友好，在过期键比较多的情况下，删除过期键这一行为可能会占用相当一部分CPU时间，对服务器的响应时间和吞吐量造成影响")]),s._v(" "),a("h4",{attrs:{id:"惰性删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性删除"}},[s._v("#")]),s._v(" 惰性删除")]),s._v(" "),a("p",[s._v("放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键；如果没有过期，就返回该键。")]),s._v(" "),a("p",[s._v("优点：对CPU很友好，程序只需在取出键的时候进行过期检查")]),s._v(" "),a("p",[s._v("缺点：对内存不友好，如果一个键已经过期，但是又长时间访问不到这个键，久而久之内存的占用率会越来越高。")]),s._v(" "),a("h4",{attrs:{id:"定期删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定期删除"}},[s._v("#")]),s._v(" 定期删除")]),s._v(" "),a("p",[s._v("每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键")]),s._v(" "),a("p",[s._v("如何确定删除操作执行的时长和频率？")]),s._v(" "),a("ul",[a("li",[s._v("如果删除操作执行得太频繁，或者执行的时间太长，定期删除策略就会退化成定时删除策略，以至于将CPU时间过多地消耗在删除过期键上。")]),s._v(" "),a("li",[s._v("如果删除操作执行得太少，或者执行的时间太短，定期删除策略又会和惰性删除策略一样，出现浪费内存的情况。")])]),s._v(" "),a("p",[s._v("因此服务器应该根据情况，合理地设置删除操作的执行时长和执行频率")]),s._v(" "),a("h3",{attrs:{id:"redis的过期键删除策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis的过期键删除策略"}},[s._v("#")]),s._v(" Redis的过期键删除策略")]),s._v(" "),a("p",[s._v("Redis服务器实际使用的是惰性删除和定期删除两种策略，通过配合使用这两种删除策略，服务器可以很好地在使用CPU时间和避免浪费内存空间之间取得平衡。")]),s._v(" "),a("h4",{attrs:{id:"惰性删除策略的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性删除策略的实现"}},[s._v("#")]),s._v(" 惰性删除策略的实现")]),s._v(" "),a("p",[s._v("过期键的惰性删除策略由db.c/expireIfNeeded函数实现，所有读写数据库的Redis命令在执行之前都会调用expireIfNeeded来对输入键进行检查。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/Krains/FigureBed/raw/master/img/%E6%83%B0%E6%80%A7%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5.png",alt:"惰性删除策略"}})]),s._v(" "),a("h4",{attrs:{id:"定期删除策略的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定期删除策略的实现"}},[s._v("#")]),s._v(" 定期删除策略的实现")]),s._v(" "),a("p",[s._v("过期键的定期删除策略由redis.c/activeExpireCycle函数实现，每当Redis的服务器周期性操作redis.c/serverCron函数执行时，activeExpireCycle函数就会被调用，它在规定的时间内，分多次遍历服务器中各个数据库，从数据库中的expires字典中随机检查一部分键的过期时间，并删除其中的过期键。")]),s._v(" "),a("p",[s._v("activeExpireCycle函数的工作模式可以总结如下：")]),s._v(" "),a("ul",[a("li",[s._v("函数每次运行时，都从一定数量的数据库中取出一定数量的随机键进行检查，并删除其中的过期键")]),s._v(" "),a("li",[s._v("全局变量current_db会记录当前activeExpireCycle函数检查的进度，并在下一次activeExpireCycle函数调用时，接着上一次的进度进行处理")]),s._v(" "),a("li",[s._v("随着activeExpireCycle函数的不断执行，服务器中的所有数据库都会被检查一遍，这时函数将current_db变量重置为0，然后再次开始新一轮的检查工作")])]),s._v(" "),a("h3",{attrs:{id:"redis持久化机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis持久化机制"}},[s._v("#")]),s._v(" Redis持久化机制")]),s._v(" "),a("p",[s._v("Redis是内存数据库，它将自己的数据库状态存储在内存，如果不想办法将存储在内存中的数据库状态保存到磁盘里面，那么一旦服务器进程退出，服务器中的数据库状态也会消失不见。")]),s._v(" "),a("blockquote",[a("p",[s._v("为了方便起见，将服务器中的非空数据库以及它们的键值对统称为数据库状态")])]),s._v(" "),a("h4",{attrs:{id:"rdb持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdb持久化"}},[s._v("#")]),s._v(" RDB持久化")]),s._v(" "),a("p",[s._v("RDB持久化可以将某个时间点上的数据库状态保存到一个RDB文件中，RDB文件是一个经过压缩的二进制文件，通过该文件可以还原生成RDB文件时的数据库状态。")]),s._v(" "),a("p",[s._v("RDB文件的创建与载入")]),s._v(" "),a("p",[s._v("可以使用两个Redis命令生成RDB文件，一个是SAVE，另一个是BGSAVE")]),s._v(" "),a("p",[s._v("SAVE命令")]),s._v(" "),a("p",[s._v("SAVE命令会阻塞Redis服务器进程，直到RDB文件创建完毕为止，在服务器进程阻塞期间，服务器不能处理任何命令请求（类似GC的STW）。")]),s._v(" "),a("p",[s._v("BGSAVE命令")]),s._v(" "),a("p",[s._v("BGSAVE命令会派生出一个子进程，然后由子进程负责创建RDB文件，服务器进程可以（父进程）继续处理命令请求。")]),s._v(" "),a("p",[s._v("创建RDB文件的实际工作由rdb.c/rdbSave函数完成，SAVE命令和BGSAVE命令会以不同的方式调用这个函数，以下是伪代码：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SAVE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建RDB文件")]),s._v("\n    rdbSave"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("BGSAVE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建子进程")]),s._v("\n    pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 子进程负责创建RDB文件")]),s._v("\n        rdbSave"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 完成之后向父进程发送信号")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 父进程继续处理命令请求，并通过轮询等待子进程的信号")]),s._v("\n    \thandle_request_and_wait_signal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 处理出错情况")]),s._v("\n        handle_fork_error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        \n        \n        \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("BGSAVE命令可以在不阻塞服务器进程的情况下执行，所以Redis允许用户通过设置服务器配置的save选项，让服务器每隔一段时间自动执行一次BGSAVE命令。")]),s._v(" "),a("p",[s._v("用户可以通过在文件redis.conf中save选项中设置多个保存条件，只要其中任意一个条件被满足，服务器就会执行BGSAVE命令。")]),s._v(" "),a("p",[s._v("默认配置如下")]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("save 900 1\nsave 300 10\nsave 60 10000\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("那么只要满足以下三个条件中的任意一个，BGSAVE命令就会被执行")]),s._v(" "),a("ul",[a("li",[s._v("服务器在900秒之内，对数据库进行了至少1次修改")]),s._v(" "),a("li",[s._v("服务器在300秒之内，对数据库进行了至少10次修改")]),s._v(" "),a("li",[s._v("服务器在60秒之内，对数据库进行了至少10000次修改")])]),s._v(" "),a("p",[s._v("服务器在启动时")]),s._v(" "),a("ul",[a("li",[s._v("如果服务器开启了AOF持久化功能，那么服务器会优先使用AOF文件来还原数据库状态")]),s._v(" "),a("li",[s._v("只有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态")])]),s._v(" "),a("h4",{attrs:{id:"aof持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aof持久化"}},[s._v("#")]),s._v(" AOF持久化")]),s._v(" "),a("p",[s._v("AOF持久化是通过保存Redis服务器所执行的写命令来记录数据库状态的")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/Krains/FigureBed/raw/master/img/AOF%E6%8C%81%E4%B9%85%E5%8C%96.png",alt:"AOF持久化"}})]),s._v(" "),a("p",[s._v("服务器在启动时，可以通过载入和执行AOF文件中保存的命令来还原服务器关闭之前的数据库状态。")]),s._v(" "),a("p",[s._v("实现原理")]),s._v(" "),a("p",[s._v("AOF持久化功能的实现可以分为三个步骤")]),s._v(" "),a("ul",[a("li",[s._v("命令追加（append）")]),s._v(" "),a("li",[s._v("文件写入")]),s._v(" "),a("li",[s._v("文件同步（sync）")])]),s._v(" "),a("p",[s._v("命令追加")]),s._v(" "),a("p",[s._v("当AOF持久化功能处于打开时，服务器在执行完一个写命令之后，会以协议格式将被执行的写命令追加到服务器状态的aof_buf缓冲区的末尾：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("struct redisServer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" AOF缓冲区\n    sds aof_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("文件写入与同步")]),s._v(" "),a("p",[s._v("Redis的服务器进程就是一个时间循环，这个循环中的文件事件负责接受客户端的命令请求，以及向客户端发送命令回复，而时间事件负责执行serverCorn函数这样需要定时运行的函数，这个过程可以用伪代码表示：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("eventLoop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 处理文件事件，接受命令请求以及发送命令回复")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 处理命令请求时可能会有新内容被追加到 aof_buf 缓存区中 ")]),s._v("\n        processFileEvents"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 处理时间事件")]),s._v("\n        processTimeEvents"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 考虑是否要将 aof_buf 中的内容写入和保存到 AOF 文件里面，根据配置决定")]),s._v("\n        flushAppendOnlyFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("flushAppendOnlyFile函数的行为由服务器配置的appendfsync选项的值来决定")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("appendfsync")]),s._v(" "),a("th",[s._v("flushAppendOnlyFile函数的行为")]),s._v(" "),a("th",[s._v("优缺点")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("always")]),s._v(" "),a("td",[s._v("将aof_buf缓冲区的所有内容写入并同步到AOF文件")]),s._v(" "),a("td",[s._v("效率低，安全性高")])]),s._v(" "),a("tr",[a("td",[s._v("everysec(默认)")]),s._v(" "),a("td",[s._v("将aof_buf缓冲区中的所有内容写入到AOF文件，如果上次同步AOF文件的时间距离现在超过一秒钟，那么再次对AOF文件进行同步，并且这个同步操作是由一个线程专门负责的")]),s._v(" "),a("td",[s._v("效率和安全性较均衡")])]),s._v(" "),a("tr",[a("td",[s._v("no")]),s._v(" "),a("td",[s._v("将aof_buf缓冲区中的所有内容写入到AOF文件，但并不对AOF文件进行同步，何时同步由操作系统决定")]),s._v(" "),a("td",[s._v("效率高，安全性低")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("文件的写入和同步")]),s._v(" "),a("p",[s._v("为了提高文件的写入效率，在现代操作系统中，当用户调用write函数，将一些数据写入到文件的时候，操作系统通常会将写入数据暂时保存在一个内存缓冲区里面，等到缓冲区的空间被填满、或者超过了指定的时限之后，才真正地将缓冲区中的数据写入到磁盘中。")]),s._v(" "),a("p",[s._v("这种做法虽然提高效率，但是如果计算机发生停机，那么保存在内存缓冲区的里面的写入数据将丢失。")]),s._v(" "),a("p",[s._v("为此，系统提供了fsync和fdatasync两个同步函数，它们可以强制让操作系统立即将缓冲区的数据写入到硬盘中。")])]),s._v(" "),a("h4",{attrs:{id:"aof文件的载入与还原"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aof文件的载入与还原"}},[s._v("#")]),s._v(" AOF文件的载入与还原")]),s._v(" "),a("p",[s._v("因为AOF文件里面包含了重建数据库状态所需的所有写命令，所以服务器只要读入并重新执行一遍AOF里面保存的写命令，就可以还原服务器关闭之前的数据状态。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/Krains/FigureBed/raw/master/img/AOF%E6%96%87%E4%BB%B6%E8%BD%BD%E5%85%A5%E8%BF%87%E7%A8%8B.png",alt:"AOF文件载入过程"}})]),s._v(" "),a("ul",[a("li",[s._v("在服务器中创建一个不带网络连接的伪客户端")]),s._v(" "),a("li",[s._v("从AOF文件中分析并读取一条写命令")]),s._v(" "),a("li",[s._v("使用伪客户端执行被读出的写命令")]),s._v(" "),a("li",[s._v("一直执行步骤2和步骤3，直到AOF文件中的所有写命令都被处理完毕为止")])]),s._v(" "),a("h4",{attrs:{id:"aof重写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aof重写"}},[s._v("#")]),s._v(" AOF重写")]),s._v(" "),a("p",[s._v("因为AOF持久化是通过保存被执行的写命令来记录数据库状态的，所以随着服务器运行时间的流逝，AOF文件中的内容会越来越多，文件的体积也会越来越大。")]),s._v(" "),a("p",[s._v("为了解决AOF文件体积膨胀的问题，Redis提供了AOF文件重写功能。AOF文件重写并不需要对现有AOF文件进行任何读取、分析或者写入操作，而是通过读取服务器当前的数据库状态来实现的。")]),s._v(" "),a("p",[s._v("比如之前服务器对list键执行了以下命令")]),s._v(" "),a("div",{staticClass:"language-cmd line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('RPUSH list "A" "B"\nRPUSH list "C"\nRPUSH list "D" "E"\nLPOP list\nLPOP list\nRPUSH list "F" "G"\t   //["C", "D", "E", "F", "G"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("服务器为了保存当前的list键的状态，必须在AOF文件中写入六条命令。我们可以直接读取数据库状态，用一条如下命令代替它")]),s._v(" "),a("div",{staticClass:"language-cmd line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('RPUSH list "C" "D" "E" "F" "G" \n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("后台重写")]),s._v(" "),a("p",[s._v("aof_rewrite函数能够根据当前数据库状态生成一个不浪费任何空间的AOF文件，但是这个函数会进行大量的写入操作，所以调用这个函数的线程将被长时间阻塞，因为Redis服务器使用单个线程来处理命令请求，所以如果由服务器直接调用aof_rewrite函数的话，在重写AOF文件期间，服务器将无法处理客户端发来的命令请求。")]),s._v(" "),a("p",[s._v("Reids将AOF重写程序放到子进程里执行，有两个优势")]),s._v(" "),a("ul",[a("li",[s._v("子进程在进行AOF重写期间，服务器进程可以继续处理命令请求")]),s._v(" "),a("li",[s._v("子进程带有服务器进程的数据副本，使用子进程而不是线程，可以在避免使用锁的情况下，保证数据的安全性")])]),s._v(" "),a("p",[s._v("但是在子进程进行AOF重写期间，服务器进程还需继续处理命令请求，而新的命令可能会对现有的数据库状态进行修改，从而使得服务器当前的数据库状态和重写后的AOF文件所保存的数据库状态不一致。")]),s._v(" "),a("p",[s._v("为了解决这种数据不一致的问题，Redis服务器设置了一个AOF重写缓冲区，这个缓冲区在服务器创建子进程之后开始使用，当Redis服务器执行完一个写命令之后，它会同时将这个命令发送给AOF缓冲区和AOF重写缓冲区")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/Krains/FigureBed/raw/master/img/AOF%E9%87%8D%E5%86%99%E7%BC%93%E5%86%B2%E5%8C%BA.png",alt:"AOF重写缓冲区"}})]),s._v(" "),a("p",[s._v("当子进程完成AOF重写工作之后，它会向父进程发送一个信号，父进程在接收到该信号之后，会调用一个信号处理函数，并执行以下工作（此时父进程阻塞）")]),s._v(" "),a("ul",[a("li",[s._v("将AOF重写缓冲区中的所有内容写入到新的AOF文件中，这时新AOF文件所保存的数据库状态将和服务器当前的数据库状态一致")]),s._v(" "),a("li",[s._v("对新的AOF文件进行改名，原子地(atomic)覆盖现有的AOF文件，完成新旧两个AOF文件的替换")])]),s._v(" "),a("p",[s._v("在整个AOF后台重写的过程中，之后信号处理函数执行时会对服务器进程造成阻塞，在其他时候，AOF后台重写都不会阻塞父进程，这将AOF重写服务器性能造成的影响降到了最低。")]),s._v(" "),a("h3",{attrs:{id:"事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[s._v("#")]),s._v(" 事务")]),s._v(" "),a("p",[s._v("Redis通过MULTI、EXEC、WATCH等命令来实现事务（transaction）功能。事务提供了一种将多个命令请求打包，然后一次性、按顺序地执行多个命令的机制，并且在事务执行期间，服务器不会中断事务而改去执行其他客户端的命令请求，它会将事务中的所有命令都执行完毕，然后才去处理其他客户端的命令请求。")]),s._v(" "),a("p",[s._v("事务的实现分为三个阶段")]),s._v(" "),a("ul",[a("li",[s._v("事务开始")]),s._v(" "),a("li",[s._v("命令入队")]),s._v(" "),a("li",[s._v("事务执行")])]),s._v(" "),a("p",[s._v("事务开始")]),s._v(" "),a("p",[s._v("MULTI命令可以将执行该命令的客户端从非事务状态切换至事务状态")]),s._v(" "),a("p",[s._v("命令入队")]),s._v(" "),a("p",[s._v("当一个客户端切换到事务状态之后，服务器会根据这个客户端发来的不同命令执行不同的操作")]),s._v(" "),a("ul",[a("li",[s._v("如果客户端发送的命令为EXEC、DISCARD、WATCH、MULTI四个命令的其中一个，那么服务器会立即执行这个命令")]),s._v(" "),a("li",[s._v("与此相反，如果客户端发送的命令不是这些命令，服务器会将这个命令放入一个事务队列里面，然后向客户端返回QUEUED回复")])]),s._v(" "),a("p",[s._v("执行事务")]),s._v(" "),a("p",[s._v("当一个处于事务状态的客户端向服务器发送EXEC命令时，这个EXEC命令将立即被服务器执行，服务器会遍历这个客户端的事务队列，执行队列中保存的所有命令，最后将执行命令所得的结果全部返回给客户端。")]),s._v(" "),a("h3",{attrs:{id:"缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[s._v("#")]),s._v(" 缓存")]),s._v(" "),a("h4",{attrs:{id:"使用缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用缓存"}},[s._v("#")]),s._v(" 使用缓存")]),s._v(" "),a("p",[s._v("在redis中查询缓存")]),s._v(" "),a("ul",[a("li",[s._v("如果不空，直接返回数据，这叫缓存命中")]),s._v(" "),a("li",[s._v("如果查出来的数据为空，再去数据库中查找，然后将数据存到缓存当中，一般设置一个过期时间")])]),s._v(" "),a("h4",{attrs:{id:"缓存穿透"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[s._v("#")]),s._v(" 缓存穿透")]),s._v(" "),a("p",[s._v("key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。")]),s._v(" "),a("p",[s._v("解决方法")]),s._v(" "),a("p",[s._v("缓存空对象：将不存在的记录也记录到缓存中")]),s._v(" "),a("p",[s._v("优点：实现简单")]),s._v(" "),a("p",[s._v("缺点：第一次访问不存在的记录时都会访问数据库，Redis中将可能会有大量空对象。")]),s._v(" "),a("p",[s._v("布隆过滤器：代码维护复杂，效果很好")]),s._v(" "),a("p",[s._v("将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。")]),s._v(" "),a("p",[s._v("布隆过滤器")]),s._v(" "),a("p",[s._v("本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 “某样东西一定不存在或者可能存在”。")]),s._v(" "),a("p",[s._v("相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。")]),s._v(" "),a("p",[s._v("实现原理")]),s._v(" "),a("p",[s._v("布隆过滤器是一个bit数组，如下图所示")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/Krains/FigureBed/raw/master/img/bit%E6%95%B0%E7%BB%84.webp",alt:"bit数组"}}),s._v(" "),a("p",[s._v('如果我们要映射一个值到布隆过滤器中，我们需要使用多个不同的哈希函数生成多个哈希值，并对每个生成的哈希值指向的bit位置1，例如针对值"baidu"和三个不同的哈希函数分别生成了哈希值1、4、7，则是这样的效果')]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/Krains/FigureBed/raw/master/img/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.webp",alt:"布隆过滤器"}}),s._v(" "),a("p",[s._v('我们再存一个值"tencent"，那么哈希值分别是3、4 、8的话，那么继续将对应位置一')]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/Krains/FigureBed/raw/master/img/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A82.webp",alt:"布隆过滤器2"}}),s._v(" "),a("p",[s._v('如果我们想查询"dianping"是否存在与布隆过滤器中，那么也通过这三个哈希函数生成三个值，如果三个位置上的位有一个是0的话，那么可以确定"dianping"这个词一定不在布隆过滤器中，但如果都是1的话很有可能存在，即可能存在误报。')]),s._v(" "),a("p",[s._v("误报率")]),s._v(" "),a("p",[s._v("误报率与布隆过滤器的长度和哈希函数的个数密切相关。布隆过滤器的长度会直接影响误报率，布隆过滤器越长其误报率越小。另外，哈希函数的个数也需要权衡，个数越多则布隆过滤器 bit 位置位 1 的速度越快，且布隆过滤器的效率越低；但是如果太少的话，那我们的误报率会变高")]),s._v(" "),a("h4",{attrs:{id:"缓存击穿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[s._v("#")]),s._v(" 缓存击穿")]),s._v(" "),a("p",[s._v("某个key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。")]),s._v(" "),a("p",[s._v("解决方法：")]),s._v(" "),a("p",[s._v("使用互斥锁+双校验，第一次从redis中查询某个key，如果存在即返回，如果不存在，加锁，再次访问redis（这是为其他线程准备的），如果不存在就访问数据库，返回数据在缓存到redis中，然后解锁，其他线程拿到锁之后就能够直接从缓存中拿出数据了。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" mutex "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" msg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mutex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第二次校验，给第二次及以后进入的线程查缓存")]),s._v("\n    msg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" reids"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    msg "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h4",{attrs:{id:"缓存雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[s._v("#")]),s._v(" 缓存雪崩")]),s._v(" "),a("p",[s._v("当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力。")]),s._v(" "),a("p",[s._v("可能出现的原因")]),s._v(" "),a("ul",[a("li",[s._v("Redis服务器突然宕机了，导致大量请求直接落在数据库上")]),s._v(" "),a("li",[s._v("某一时刻大量缓存的数据突然到期了，也会导致大量请求直接落在数据库上")])]),s._v(" "),a("p",[s._v("解决方法")]),s._v(" "),a("p",[s._v("针对Redis宕机")]),s._v(" "),a("ul",[a("li",[s._v("采用Redis集群，避免单机出现问题而导致整个缓存服务都没办法使用")]),s._v(" "),a("li",[s._v("限流，避免同时处理大量请求")])]),s._v(" "),a("p",[s._v("针对热点缓存失效的情况")]),s._v(" "),a("ul",[a("li",[s._v("随机设置缓存的失效时间")]),s._v(" "),a("li",[s._v("设置缓存永不过期")])]),s._v(" "),a("h4",{attrs:{id:"缓存一致性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存一致性问题"}},[s._v("#")]),s._v(" 缓存一致性问题")]),s._v(" "),a("p",[s._v("引入缓存之后，如果为了短时间的不一致性问题，选择让系统设计变得更加复杂的话，可以但没必要。")]),s._v(" "),a("h3",{attrs:{id:"redis的内存淘汰机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis的内存淘汰机制"}},[s._v("#")]),s._v(" Redis的内存淘汰机制")]),s._v(" "),a("p",[s._v("为了不让大量过期的key堆积在内存中，Redis引入了内存淘汰机制")]),s._v(" "),a("p",[s._v("Redis 具体有 6 种淘汰策略：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("策略")]),s._v(" "),a("th",[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("volatile-lru")]),s._v(" "),a("td",[s._v("从已设置过期时间的数据集中挑选最近最少使用的数据淘汰")])]),s._v(" "),a("tr",[a("td",[s._v("volatile-ttl")]),s._v(" "),a("td",[s._v("从已设置过期时间的数据集中挑选将要过期的数据淘汰")])]),s._v(" "),a("tr",[a("td",[s._v("volatile-random")]),s._v(" "),a("td",[s._v("从已设置过期时间的数据集中任意选择数据淘汰")])]),s._v(" "),a("tr",[a("td",[s._v("allkeys-lru")]),s._v(" "),a("td",[s._v("当内存不足时，从所有数据集中挑选最近最少使用的数据淘汰（最常用）")])]),s._v(" "),a("tr",[a("td",[s._v("allkeys-random")]),s._v(" "),a("td",[s._v("从所有数据集中任意选择数据进行淘汰")])]),s._v(" "),a("tr",[a("td",[s._v("noeviction")]),s._v(" "),a("td",[s._v("禁止驱逐数据")])])])]),s._v(" "),a("p",[s._v("参考链接")]),s._v(" "),a("p",[s._v("[1]. "),a("a",{attrs:{href:"https://www.cnblogs.com/xichji/p/11286443.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("REDIS缓存穿透，缓存击穿，缓存雪崩原因+解决方案"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("[2]. "),a("a",{attrs:{href:"https://www.jianshu.com/p/2104d11ee0a2",target:"_blank",rel:"noopener noreferrer"}},[s._v("详解布隆过滤器的原理、使用场景和注意事项"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);