(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{513:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("AQS")]),t._v(" "),a("p",[t._v("全称是 AbstractQueuedSynchronizer，即抽象队列同步器，从字面上可以理解为")]),t._v(" "),a("ul",[a("li",[t._v("抽象：抽象类，只实现一些主要逻辑，有些方法则由子类实现，JUC包下许多锁如重入锁、读写锁等都是基于AQS实现的")]),t._v(" "),a("li",[t._v("队列：使用先进先出队列存储线程，等待拥有锁的线程释放锁的时候唤醒队列中的线程去竞争锁")]),t._v(" "),a("li",[t._v("同步：实现了同步的功能")])]),t._v(" "),a("p",[t._v("AQS有什么用？AQS是一个用来构建锁和同步器的框架，使用AQS能够简单高效的构造出应用广泛的同步器，比如ReentrantLock，Semaphore，ReentrantReadWriteLock，SynchronousQueue，FutureTask等等皆是基于AQS的。")]),t._v(" "),a("p",[t._v("特点")]),t._v(" "),a("p",[t._v("用 state 属性来表示资源的状态(分独占模式和共享模式)，子类需要定义如何维护这个状态，控制如何获取\n锁和释放锁")]),t._v(" "),a("ul",[a("li",[t._v("getState - 获取 state 状态")]),t._v(" "),a("li",[t._v("setState - 设置 state 状态")]),t._v(" "),a("li",[t._v("compareAndSetState - CAS 机制设置 state 状态")]),t._v(" "),a("li",[t._v("独占模式是只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源")])]),t._v(" "),a("p",[t._v("提供了基于FIFO的等待队列，类似与Monitor的EntryList")]),t._v(" "),a("p",[t._v("条件变量来实现等待、唤醒机制，支持多个条件变量，类似与Monitor的WaitSet")]),t._v(" "),a("p",[t._v("子类主要实现这样一些方法(默认抛出 UnsupportedOperationException)")]),t._v(" "),a("ul",[a("li",[t._v("tryAcquire")]),t._v(" "),a("li",[t._v("tryRelease")]),t._v(" "),a("li",[t._v("tryAcquireShared")]),t._v(" "),a("li",[t._v("tryReleaseShared")]),t._v(" "),a("li",[t._v("isHeldExclusively")])]),t._v(" "),a("p",[t._v("获取锁方法")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果获取锁失败")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryAcquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入队, 可以选择阻塞当前线程  park unpark")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("释放锁方法")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果释放锁成功")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tryRelease")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 让阻塞线程恢复运行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);